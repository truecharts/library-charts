suite: pod node selector test
templates:
  - common.yaml
release:
  name: test-release-name
  namespace: test-release-namespace
tests:
  - it: should pass with empty nodeSelector
    set:
      podOptions:
        nodeSelector: {}
      workload:
        workload-name1:
          enabled: true
          primary: true
          type: CronJob
          schedule: "*/1 * * * *"
          podSpec: {}
    asserts:
      - documentIndex: &cronJobDoc 0
        isKind:
          of: CronJob
      - documentIndex: *cronJobDoc
        isNull:
          path: spec.jobTemplate.spec.template.spec.nodeSelector

  - it: should pass with nodeSelector from "global"
    set:
      podOptions:
        nodeSelector:
          disk: ssd
          cpu: intel
      workload:
        workload-name1:
          enabled: true
          primary: true
          type: CronJob
          schedule: "*/1 * * * *"
          podSpec: {}
    asserts:
      - documentIndex: *cronJobDoc
        equal:
          path: spec.jobTemplate.spec.template.spec.nodeSelector
          value:
            disk: ssd
            cpu: intel

  - it: should set nodeSelector to non-existing on DaemonSet with stopAll
    set:
      global:
        stopAll: true
      podOptions:
        nodeSelector:
          disk: ssd
      workload:
        workload-name1:
          enabled: true
          primary: true
          type: DaemonSet
          podSpec: {}
    asserts:
      - documentIndex: *cronJobDoc
        equal:
          path: spec.template.spec.nodeSelector
          value:
            non-existing: "true"

  - it: should set nodeSelector to non-existing on DaemonSet with ixChartContext - isStopped (true)
    set:
      global:
        namespace: ix-something
        ixChartContext:
          storageClassName: some-storage-class
          isStopped: true
      podOptions:
        nodeSelector:
          disk: ssd
      workload:
        workload-name1:
          enabled: true
          primary: true
          type: DaemonSet
          podSpec: {}
    asserts:
      - documentIndex: *cronJobDoc
        equal:
          path: spec.template.spec.nodeSelector
          value:
            non-existing: "true"

  - it: should not set nodeSelector to non-existing on DaemonSet with ixChartContext - isStopped (false)
    set:
      global:
        namespace: ix-something
        ixChartContext:
          storageClassName: some-storage-class
          isStopped: false
      podOptions:
        nodeSelector:
          disk: ssd
      workload:
        workload-name1:
          enabled: true
          primary: true
          type: DaemonSet
          podSpec: {}
    asserts:
      - documentIndex: *cronJobDoc
        notEqual:
          path: spec.template.spec.nodeSelector
          value:
            non-existing: "true"

  - it: should not set nodeSelector to non-existent on non-DaemonSet with stopAll
    set:
      global:
        stopAll: true
      podOptions:
        nodeSelector:
          disk: ssd
      workload:
        workload-name1:
          enabled: true
          primary: true
          type: Deployment
          podSpec: {}
    asserts:
      - documentIndex: *cronJobDoc
        notEqual:
          path: spec.template.spec.nodeSelector
          value:
            non-existing: "true"

  - it: should not set nodeSelector to non-existent on non-DaemonSet with ixChartContext - isStopped (true)
    set:
      global:
        namespace: ix-something
        ixChartContext:
          storageClassName: some-storage-class
          isStopped: true
      podOptions:
        nodeSelector:
          disk: ssd
      workload:
        workload-name1:
          enabled: true
          primary: true
          type: Deployment
          podSpec: {}
    asserts:
      - documentIndex: *cronJobDoc
        notEqual:
          path: spec.template.spec.nodeSelector
          value:
            non-existing: "true"

  - it: should not set nodeSelector to non-existent on non-DaemonSet with ixChartContext - isStopped (false)
    set:
      global:
        namespace: ix-something
        ixChartContext:
          storageClassName: some-storage-class
          isStopped: false
      podOptions:
        nodeSelector:
          disk: ssd
      workload:
        workload-name1:
          enabled: true
          primary: true
          type: Deployment
          podSpec: {}
    asserts:
      - documentIndex: *cronJobDoc
        notEqual:
          path: spec.template.spec.nodeSelector
          value:
            non-existing: "true"

  - it: should pass with nodeSelector from "pod"
    set:
      podOptions:
        nodeSelector:
          disk: ssd
          cpu: intel
      workload:
        workload-name1:
          enabled: true
          primary: true
          type: CronJob
          schedule: "*/1 * * * *"
          podSpec:
            nodeSelector:
              disk: hdd
              cpu: amd
    asserts:
      - documentIndex: *cronJobDoc
        equal:
          path: spec.jobTemplate.spec.template.spec.nodeSelector
          value:
            disk: hdd
            cpu: amd

  - it: should pass with nodeSelector from "pod" with tpl
    set:
      disk_type: hdd
      podOptions:
        nodeSelector:
          disk: ssd
          cpu: intel
      workload:
        workload-name1:
          enabled: true
          primary: true
          type: CronJob
          schedule: "*/1 * * * *"
          podSpec:
            nodeSelector:
              disk: "{{ .Values.disk_type }}"
              cpu: amd
    asserts:
      - documentIndex: *cronJobDoc
        equal:
          path: spec.jobTemplate.spec.template.spec.nodeSelector
          value:
            disk: hdd
            cpu: amd
  # Failures
  - it: should fail with empty value on nodeSelector
    set:
      podOptions:
        nodeSelector:
          disk: ""
      workload:
        workload-name1:
          enabled: true
          primary: true
          type: CronJob
          schedule: "*/1 * * * *"
          podSpec: {}
    asserts:
      - failedTemplate:
          errorMessage: Expected non-empty value on <nodeSelector> [disk] key.
