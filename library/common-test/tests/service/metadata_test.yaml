suite: service metadata test
templates:
  - common.yaml
chart:
  appVersion: &appVer v9.9.9
release:
  name: test-release-name
  namespace: test-release-namespace
tests:
  - it: should pass with service created with labels and annotations
    set:
      label1: label1
      label2: global_label2
      annotation1: annotation1
      annotation2: global_annotation2
      global:
        labels:
          g_label1: global_label1
          g_label2: "{{ .Values.label2 }}"
        annotations:
          g_annotation1: global_annotation1
          g_annotation2: "{{ .Values.annotation2 }}"
      service:
        my-service1:
          enabled: true
          primary: true
          labels:
            label1: "{{ .Values.label1 }}"
            label2: label2
          annotations:
            annotation1: "{{ .Values.annotation1 }}"
            annotation2: annotation2
          ports:
            port-name:
              enabled: true
              primary: true
              port: 12345
        my-service2:
          enabled: true
          primary: false
          ports:
            port-name:
              enabled: true
              primary: true
              port: 1234
      workload:
        my-workload:
          enabled: true
          primary: true
          type: Deployment
          podSpec: {}
    asserts:
      - documentIndex: &serviceDoc 1
        isKind:
          of: Service
      - documentIndex: *serviceDoc
        equal:
          path: metadata.annotations
          value:
            annotation1: annotation1
            annotation2: annotation2
            g_annotation1: global_annotation1
            g_annotation2: global_annotation2
      - documentIndex: *serviceDoc
        equal:
          path: metadata.labels
          value:
            app: common-test-1.0.0
            release: test-release-name
            helm-revision: "0"
            helm.sh/chart: common-test-1.0.0
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/version: *appVer
            app.kubernetes.io/instance: test-release-name
            app.kubernetes.io/name: common-test
            service.name: my-service1
            g_label1: global_label1
            g_label2: global_label2
            label1: label1
            label2: label2
      - documentIndex: *serviceDoc
        equal:
          path: metadata.name
          value: test-release-name-common-test
      - documentIndex: *serviceDoc
        equal:
          path: metadata.namespace
          value: test-release-namespace
      - documentIndex: &otherServiceDoc 2
        isKind:
          of: Service
      - documentIndex: *otherServiceDoc
        equal:
          path: metadata.labels
          value:
            service.name: my-service2
            app: common-test-1.0.0
            app.kubernetes.io/instance: test-release-name
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: common-test
            app.kubernetes.io/version: *appVer
            g_label1: global_label1
            g_label2: global_label2
            helm-revision: "0"
            helm.sh/chart: common-test-1.0.0
            release: test-release-name
      - documentIndex: *otherServiceDoc
        equal:
          path: metadata.name
          value: test-release-name-common-test-my-service2
      - documentIndex: *otherServiceDoc
        equal:
          path: metadata.namespace
          value: test-release-namespace

  - it: should pass with service type LoadBalancer, with https port and addMetalLBAnnotations/Traefik true
    set:
      global:
        addMetalLBAnnotations: true
        addTraefikAnnotations: true
      proto: https
      service:
        my-service1:
          enabled: true
          primary: true
          type: LoadBalancer
          ports:
            port-name:
              enabled: true
              primary: true
              protocol: "{{ .Values.proto }}"
              port: 12345
      workload:
        my-workload:
          enabled: true
          primary: true
          type: Deployment
          podSpec: {}
    asserts:
      - documentIndex: *serviceDoc
        isKind:
          of: Service
      - documentIndex: *serviceDoc
        isSubset:
          path: metadata.annotations
          content:
            metallb.universe.tf/allow-shared-ip: test-release-name-common-test
            traefik.ingress.kubernetes.io/service.serversscheme: https

  - it: should pass with correct selector with targetSelector
    set:
      service:
        my-service1:
          enabled: true
          primary: true
          targetSelector: my-workload
          ports:
            port-name:
              enabled: true
              primary: true
              port: 12345
      workload:
        my-workload:
          enabled: true
          primary: true
          type: Deployment
          podSpec: {}
    asserts:
      - documentIndex: *serviceDoc
        isKind:
          of: Service
      - documentIndex: *serviceDoc
        equal:
          path: spec.selector
          value:
            pod.name: my-workload
            app.kubernetes.io/name: common-test
            app.kubernetes.io/instance: test-release-name

  - it: should pass with correct selector without targetSelector
    set:
      service:
        my-service1:
          enabled: true
          primary: true
          ports:
            port-name:
              enabled: true
              primary: true
              port: 12345
      workload:
        my-workload:
          enabled: true
          primary: true
          type: Deployment
          podSpec: {}
        my-workload2:
          enabled: true
          type: StatefulSet
          podSpec: {}
    asserts:
      - documentIndex: &serviceDoc 2
        isKind:
          of: Service
      - documentIndex: *serviceDoc
        equal:
          path: spec.selector
          value:
            pod.name: my-workload
            app.kubernetes.io/name: common-test
            app.kubernetes.io/instance: test-release-name

  - it: should pass with service created with object namespace from tpl
    set:
      key: some-namespace
      service:
        my-service1:
          enabled: true
          primary: true
          namespace: "{{ .Values.key }}"
          ports:
            port-name:
              enabled: true
              primary: true
              port: 12345
    asserts:
      - documentIndex: &serviceDoc 0
        equal:
          path: metadata.namespace
          value: some-namespace

  - it: should pass with service created with global namespace from tpl
    set:
      key: global-namespace
      global:
        namespace: "{{ .Values.key }}"
      service:
        my-service1:
          enabled: true
          primary: true
          ports:
            port-name:
              enabled: true
              primary: true
              port: 12345
    asserts:
      - documentIndex: *serviceDoc
        equal:
          path: metadata.namespace
          value: global-namespace

  - it: should pass with service created with root namespace from tpl
    set:
      key: local-namespace
      namespace: "{{ .Values.key }}"
      global:
        namespace: global-namespace
      service:
        my-service1:
          enabled: true
          primary: true
          ports:
            port-name:
              enabled: true
              primary: true
              port: 12345
    asserts:
      - documentIndex: *serviceDoc
        equal:
          path: metadata.namespace
          value: local-namespace

  - it: should pass with service created with namespace in TrueNAS SCALE
    set:
      global:
        ixChartContext:
          iAmNotEmpty: true
      namespace: ix-namespace
      service:
        my-service1:
          enabled: true
          primary: true
          ports:
            port-name:
              enabled: true
              primary: true
              port: 12345
    asserts:
      - documentIndex: *serviceDoc
        equal:
          path: metadata.namespace
          value: ix-namespace
